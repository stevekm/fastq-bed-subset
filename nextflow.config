def currentDirPath = new File(System.getProperty("user.dir")).getCanonicalPath()

report {
    enabled = true
    file = "nextflow.html"
}

trace {
    enabled = true
    fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes"
    file = "trace.txt"
    raw = true
}

timeline {
    enabled = true
    file = "timeline.html"
}

profiles {
    standard {
        executor {
            $slurm {
                queueSize = 50
                exitReadTimeout = '9000min' // NYULMC HPC likes to move jobs around on its own
                submitRateLimit = '10 sec'
            }
            $local { // sets the amount of resources to use when executing locally
                cpus = 4
                queueSize = 4
                memory = '8 GB'
            }
        }
        process {
            executor = 'slurm'
            queue = 'cpu_medium'

            params.clusterOptions = '--ntasks-per-node=1 --export=NONE --export=NTHREADS'
            clusterOptions = "${params.clusterOptions}"

            params.SLURM_vars='SLURM_JOB_ID SLURM_JOB_NAME SLURM_JOB_NODELIST SLURM_JOB_PARTITION SLURM_MEM_PER_CPU SLURM_MEM_PER_NODE SLURM_PRIO_PROCESS SLURM_SUBMIT_DIR SLURM_SUBMIT_HOST SLURM_TASK_PID SLURMD_NODENAME'

            beforeScript = """
            export PATH="${currentDirPath}/conda/bin:\${PATH}"
            . /etc/profile.d/modules.sh;
            sleep 1;
            printf "USER:\${USER:-none} HOSTNAME:\${HOSTNAME:-none} PWD:\$PWD NTHREADS:\${NTHREADS:-none}\n";
            for item in ${params.SLURM_vars}; do printf "\${item}: \${!item:-none}\t"; done;
            echo "";
            TIMESTART=\$(date +%s);
            env > .env.begin;
            """

            afterScript = """
            printf "elapsed time: %s\n" \$((\$(date +%s) - \${TIMESTART:-0}));
            env > .env.end;
            """

            cpus = 1
            time = '1h'
            memory = { 2.GB * task.cpus }

            // withName: fastq_merge_bam_index {
            //     // executor = "local"
            // }
            // withName: get_qnames {
            //     // executor = "local"
            // }
            withName: subset_fastq {
                time = "48h"
            }
        }
    }
}
